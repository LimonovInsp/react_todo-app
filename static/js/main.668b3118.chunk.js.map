{"version":3,"sources":["components/Header/HeaderInput/HeaderInput.js","components/Header/Header.js","components/TodoFooter/TodoFooter.js","components/Helpers/addHighlight.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["HeaderInput","handleAddTask","task","className","maxLength","placeholder","value","onChange","event","target","required","Header","props","handleSubmit","onSubmit","TodoFooter","remainedTasks","isSubmitted","handleShowActive","handleShowCompleted","handleShowAll","handleClearCompleted","footerDisplaying","display","buttonsList","link","content","onClick","style","map","button","index","key","uuid","href","type","addHighLight","checkBoxId","get","TodoList","state","defaultList","generalList","onToggle","setState","this","handleChecked","handleClearTask","handleMarkAll","isTouched","completedTasks","Array","from","values","filter","length","taskStructure","id","checked","htmlFor","toggle","listDisplaying","React","Component","App","dynamicList","Map","replace","preventDefault","prevState","set","delete","forEach","currentValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.668b3118.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const HeaderInput = ({ handleAddTask, task }) => (\n  <input\n    className=\"new-todo\"\n    maxLength=\"25\"\n    placeholder=\"What needs to be done?\"\n    value={task}\n    onChange={event => handleAddTask(event.target.value)}\n    required\n  />\n);\n\nHeaderInput.propTypes = {\n  handleAddTask: PropTypes.func.isRequired,\n  task: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderInput } from './HeaderInput/HeaderInput';\n\nexport const Header = (props) => {\n  const { handleAddTask, task, handleSubmit } = props;\n\n  return (\n    <form onSubmit={handleSubmit} className=\"header\">\n      <h1>todos</h1>\n      <HeaderInput handleAddTask={handleAddTask} task={task} />\n    </form>\n  );\n};\n\nHeader.propTypes = {\n  handleAddTask: PropTypes.func.isRequired,\n  task: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport const TodoFooter = (props) => {\n  const {\n    remainedTasks,\n    isSubmitted,\n    handleShowActive,\n    handleShowCompleted,\n    handleShowAll,\n    handleClearCompleted,\n    value,\n  } = props;\n  const footerDisplaying = isSubmitted\n    ? { display: 'block' } : { display: 'none' };\n\n  const buttonsList = [\n    {\n      link: '#/',\n      content: 'All',\n      onClick: handleShowAll,\n    },\n    {\n      link: '#/active',\n      content: 'Active',\n      onClick: handleShowActive,\n    },\n    {\n      link: '#/completed',\n      content: 'Completed',\n      onClick: handleShowCompleted,\n    },\n  ];\n\n  return (\n    <footer className=\"footer\" style={footerDisplaying}>\n      <span className=\"todo-count\">\n        {`${remainedTasks} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {buttonsList.map((button, index) => (\n          <li key={uuid()}>\n            <a\n              onClick={() => button.onClick(index)}\n              href={button.link}\n              className={value === index ? 'selected' : ''}\n            >\n              {button.content}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        onClick={handleClearCompleted}\n        type=\"button\"\n        className=\"clear-completed\"\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodoFooter.propTypes = {\n  remainedTasks: PropTypes.number.isRequired,\n  isSubmitted: PropTypes.bool.isRequired,\n  handleShowActive: PropTypes.func.isRequired,\n  handleShowCompleted: PropTypes.func.isRequired,\n  handleShowAll: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n","export const addHighLight = (index, checkBoxId) => (\n  checkBoxId.get(index) ? 'completed' : ''\n);\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport PropTypes from 'prop-types';\nimport { TodoFooter } from '../TodoFooter/TodoFooter';\nimport { addHighLight } from '../Helpers/addHighlight';\n\nexport class TodoList extends React.Component {\n    state = {\n      defaultList: [...this.props.generalList],\n      onToggle: 'default',\n      value: 0,\n    };\n\n    // componentDidUpdate(prevProps) {\n    //   if (prevProps.generalList !== this.props.generalList) {\n    //     this.setState({\n    //       defaultList: this.props.generalList,\n    //     });\n    //   }\n    // }\n\n    static getDerivedStateFromProps(props, state) {\n      if (props.generalList !== state.defaultList) {\n        return {\n          defaultList: props.generalList,\n        };\n      }\n\n      return null;\n    }\n\n    handleShowActive = (index) => {\n      this.setState({\n        onToggle: 'active',\n        value: index,\n      });\n    }\n\n    handleShowCompleted = (index) => {\n      this.setState({\n        onToggle: 'completed',\n        value: index,\n      });\n    }\n\n    handleShowAll = (index) => {\n      this.setState({\n        onToggle: 'default',\n        value: index,\n      });\n    }\n\n    render() {\n      const { onToggle, defaultList, value } = this.state;\n      const {\n        isSubmitted,\n        checkBoxId,\n        handleChecked,\n        handleClearCompleted,\n        handleClearTask,\n        handleMarkAll,\n        isTouched,\n      } = this.props;\n      const completedTasks = Array.from(checkBoxId.values())\n        .filter(task => task !== false).length;\n      const remainedTasks = defaultList.length - completedTasks;\n\n      const taskStructure = (id, task) => (\n        <li className={addHighLight(id, checkBoxId)} key={uuid()}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={`todo-${id}`}\n              checked={checkBoxId.get(id) === true}\n              onChange={event => handleChecked(id, event.target.checked)}\n            />\n            <label htmlFor={`todo-${id}`}>{task}</label>\n            <button\n              type=\"button\"\n              onClick={() => handleClearTask(id)}\n              className=\"destroy\"\n            />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      );\n\n      const listDisplaying = (toggle) => {\n        switch (toggle) {\n          case 'active':\n            return [...defaultList].filter(task => !checkBoxId.get(task.id))\n              .map(task => (\n                taskStructure(task.id, task.task)\n              ));\n          case 'completed':\n            return [...defaultList].filter(task => checkBoxId.get(task.id))\n              .map(task => (\n                taskStructure(task.id, task.task)\n              ));\n          default:\n            return defaultList.map(task => (\n              taskStructure(task.id, task.task)\n            ));\n        }\n      };\n\n      return (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              onClick={() => handleMarkAll(isTouched)}\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n              {listDisplaying(onToggle)}\n            </ul>\n          </section>\n          <TodoFooter\n            remainedTasks={remainedTasks}\n            value={value}\n            handleClearCompleted={handleClearCompleted}\n            isSubmitted={isSubmitted}\n            handleShowActive={this.handleShowActive}\n            handleShowCompleted={this.handleShowCompleted}\n            handleShowAll={this.handleShowAll}\n          />\n        </>\n      );\n    }\n}\n\nTodoList.propTypes = {\n  generalList: PropTypes.arrayOf(PropTypes.shape({\n    task: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n  isSubmitted: PropTypes.bool.isRequired,\n  checkBoxId: PropTypes.objectOf(PropTypes.any).isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  handleClearTask: PropTypes.func.isRequired,\n  handleMarkAll: PropTypes.func.isRequired,\n  isTouched: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport { Header } from './components/Header/Header';\nimport { TodoList } from './components/TodoList/TodoList';\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    dynamicList: [],\n    isSubmitted: false,\n    checkBoxId: new Map(),\n    isTouched: false,\n  }\n\n  handleAddTask = (event) => {\n    this.setState({\n      task: event.replace(/^\\s/, '').replace(/\\s/g, ' '),\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState(prevState => ({\n      dynamicList: [...prevState.dynamicList, {\n        task: prevState.task,\n        id: uuid(),\n      }],\n      task: '',\n      isSubmitted: true,\n    }));\n  }\n\n  handleChecked = (id, event) => {\n    this.setState(prevState => ({\n      checkBoxId: prevState.checkBoxId.set(id, event),\n    }));\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      dynamicList: prevState.dynamicList\n        .filter(task => !prevState.checkBoxId.get(task.id)),\n      checkBoxId: new Map(),\n    }));\n  }\n\n  handleClearTask = (id) => {\n    this.setState(prevState => ({\n      dynamicList: prevState.dynamicList.filter(task => task.id !== id),\n    }));\n\n    return this.state.checkBoxId.delete(id);\n  }\n\n  handleMarkAll = () => {\n    this.setState(prevState => ({\n      isTouched: !prevState.isTouched,\n    }), () => {\n      if (this.state.isTouched === true) {\n        this.state.dynamicList.forEach((currentValue) => {\n          this.setState(prevState => ({\n            checkBoxId: prevState.checkBoxId.set(currentValue.id, true),\n          }));\n        });\n      } else {\n        this.setState({\n          checkBoxId: new Map(),\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      task,\n      dynamicList,\n      isSubmitted,\n      checkBoxId,\n      isTouched,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          handleAddTask={this.handleAddTask}\n          task={task}\n          handleSubmit={this.handleSubmit}\n        />\n        <TodoList\n          generalList={dynamicList}\n          checkBoxId={checkBoxId}\n          handleChecked={this.handleChecked}\n          isTouched={isTouched}\n          handleMarkAll={this.handleMarkAll}\n          handleClearTask={this.handleClearTask}\n          isSubmitted={isSubmitted}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}