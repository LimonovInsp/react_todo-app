{"version":3,"sources":["components/Header/HeaderInput/HeaderInput.js","components/Header/Header.js","components/TodoFooter/TodoFooter.js","components/Shapes/TodoFooterShape.js","components/Helpers/addHighlight.js","components/Shapes/TodoListShape.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["HeaderInput","handleAddTask","task","className","maxLength","placeholder","value","onChange","event","target","required","Header","props","handleSubmit","onSubmit","TodoFooter","PropTypes","shape","remainedTasks","number","isRequired","handleShowActive","func","handleShowCompleted","handleShowAll","handleClearCompleted","generalList","arrayOf","string","id","footerDisplaying","defaultList","length","display","buttonsList","link","content","onClick","style","map","button","index","key","uuid","href","type","addHighLight","checkBoxId","objectOf","any","handleChecked","handleClearTask","handleMarkAll","isTouched","bool","TodoList","state","onToggle","setState","this","completedTasks","Array","from","Object","values","filter","updatedList","htmlFor","todoItem","checked","React","Component","App","dynamicList","JSON","parse","localStorage","getItem","replace","preventDefault","prevState","forEach","currentValue","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"uTAGaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,KAAlB,OACzB,2BACEC,UAAU,WACVC,UAAU,KACVC,YAAY,yBACZC,MAAOJ,EACPK,SAAU,SAAAC,GAAK,OAAIP,EAAcO,EAAMC,OAAOH,QAC9CI,UAAQ,KCNCC,EAAS,SAACC,GAAW,IACxBX,EAAsCW,EAAtCX,cAAeC,EAAuBU,EAAvBV,KAAMW,EAAiBD,EAAjBC,aAE7B,OACE,0BAAMC,SAAUD,EAAcV,UAAU,UACtC,qCACA,kBAAC,EAAD,CAAaF,cAAeA,EAAeC,KAAMA,M,gBCN1Ca,GCFkBC,IAAUC,MAAM,CAC7CC,cAAeF,IAAUG,OAAOC,WAChCC,iBAAkBL,IAAUM,KAAKF,WACjCG,oBAAqBP,IAAUM,KAAKF,WACpCI,cAAeR,IAAUM,KAAKF,WAC9BK,qBAAsBT,IAAUM,KAAKF,WACrCd,MAAOU,IAAUG,OAAOC,WACxBM,YAAaV,IAAUW,QAAQX,IAAUC,MAAM,CAC7Cf,KAAMc,IAAUY,OAAOR,WACvBS,GAAIb,IAAUY,OAAOR,cACnBA,aDRoB,SAACR,GAAW,IAElCM,EAOEN,EAPFM,cACAG,EAMET,EANFS,iBACAE,EAKEX,EALFW,oBACAC,EAIEZ,EAJFY,cACAC,EAGEb,EAHFa,qBACAnB,EAEEM,EAFFN,MAGIwB,EADFlB,EADFmB,YAEmCC,OACjC,CAAEC,QAAS,SAAY,CAAEA,QAAS,QAEhCC,EAAc,CAClB,CACEC,KAAM,KACNC,QAAS,MACTC,QAASb,GAEX,CACEW,KAAM,WACNC,QAAS,SACTC,QAAShB,GAEX,CACEc,KAAM,cACNC,QAAS,YACTC,QAASd,IAIb,OACE,4BAAQpB,UAAU,SAASmC,MAAOR,GAChC,0BAAM3B,UAAU,cAAhB,UACMe,EADN,gBAIA,wBAAIf,UAAU,WACX+B,EAAYK,KAAI,SAACC,EAAQC,GAAT,OACf,wBAAIC,IAAKC,kBACP,uBACEN,QAAS,kBAAMG,EAAOH,QAAQI,IAC9BG,KAAMJ,EAAOL,KACbhC,UAAWG,IAAUmC,EAAQ,WAAa,IAEzCD,EAAOJ,cAMhB,4BACEC,QAASZ,EACToB,KAAK,SACL1C,UAAU,mBAHZ,sBEvDO2C,GCEgB9B,IAAUC,MAAM,CAC3CS,YAAaV,IAAUW,QAAQX,IAAUC,MAAM,CAC7Cf,KAAMc,IAAUY,OAAOR,WACvBS,GAAIb,IAAUY,OAAOR,cACnBA,WACJ2B,WAAY/B,IAAUgC,SAAShC,IAAUiC,KAAK7B,WAC9C8B,cAAelC,IAAUM,KAAKF,WAC9BK,qBAAsBT,IAAUM,KAAKF,WACrC+B,gBAAiBnC,IAAUM,KAAKF,WAChCgC,cAAepC,IAAUM,KAAKF,WAC9BiC,UAAWrC,IAAUsC,KAAKlC,aDZA,SAACqB,EAAOM,GAAR,OACJ,IAAtBA,EAAWN,GAAkB,YAAc,KEIhCc,EAAb,4MACIC,MAAQ,CACNzB,YAAY,YAAK,EAAKnB,MAAMc,aAC5B+B,SAAU,UACVnD,MAAO,GAJb,EAiBIe,iBAAmB,SAACoB,GAClB,EAAKiB,SAAS,CACZD,SAAU,SACVnD,MAAOmC,KApBf,EAwBIlB,oBAAsB,SAACkB,GACrB,EAAKiB,SAAS,CACZD,SAAU,YACVnD,MAAOmC,KA3Bf,EA+BIjB,cAAgB,SAACiB,GACf,EAAKiB,SAAS,CACZD,SAAU,UACVnD,MAAOmC,KAlCf,uDAsCc,IAAD,EACkCkB,KAAKH,MAAtCC,EADD,EACCA,SAAU1B,EADX,EACWA,YAAazB,EADxB,EACwBA,MADxB,EASHqD,KAAK/C,MANPmC,EAHK,EAGLA,WACAG,EAJK,EAILA,cACAzB,EALK,EAKLA,qBACA0B,EANK,EAMLA,gBACAC,EAPK,EAOLA,cACAC,EARK,EAQLA,UAEIO,EAAiBC,MAAMC,KAAKC,OAAOC,OAAOjB,IAC7CkB,QAAO,SAAA/D,GAAI,OAAa,IAATA,KAAgB8B,OAC5Bd,EAAgBa,EAAYC,OAAS4B,EACvCM,EAAc,GAElB,OAAQT,GACN,IAAK,SACHS,EAAcnC,EACXkC,QAAO,SAAA/D,GAAI,OAA6B,KAAxB6C,EAAW7C,EAAK2B,OACnC,MACF,IAAK,YACHqC,EAAcnC,EACXkC,QAAO,SAAA/D,GAAI,OAA4B,IAAxB6C,EAAW7C,EAAK2B,OAClC,MACF,QACEqC,EAAcnC,EAGlB,OACE,oCACE,6BAAS5B,UAAU,QACjB,2BACE0C,KAAK,WACLR,QAAS,kBAAMe,EAAcC,IAC7BxB,GAAG,aACH1B,UAAU,eAEZ,2BAAOgE,QAAQ,cAAf,wBACA,wBAAIhE,UAAU,aACX+D,EAAY3B,KAAI,SAAA6B,GAAQ,OACvB,wBACEjE,UAAW2C,EAAasB,EAASvC,GAAIkB,GACrCL,IAAK0B,EAASvC,IAEd,yBAAK1B,UAAU,QACb,2BACE0C,KAAK,WACL1C,UAAU,SACV0B,GAAE,eAAUuC,EAASvC,IACrBwC,SAAqC,IAA5BtB,EAAWqB,EAASvC,IAC7BtB,SAAU,SAACC,GACT0C,EAAckB,EAASvC,GAAIrB,EAAMC,OAAO4D,YAG5C,+BAAQD,EAASlE,MACjB,4BACE2C,KAAK,SACLR,QAAS,kBAAMc,EAAgBiB,EAASvC,KACxC1B,UAAU,aAGd,2BAAO0C,KAAK,OAAO1C,UAAU,eAKrC,kBAAC,EAAD,CACEe,cAAeA,EACfZ,MAAOA,EACPyB,YAAaA,EACbN,qBAAsBA,EACtBJ,iBAAkBsC,KAAKtC,iBACvBE,oBAAqBoC,KAAKpC,oBAC1BC,cAAemC,KAAKnC,oBA/GhC,gDAOoCZ,EAAO4C,GACrC,OAAI5C,EAAMc,cAAgB8B,EAAMzB,YACvB,CACLA,YAAanB,EAAMc,aAIhB,SAdb,GAA8B4C,IAAMC,WC4GrBC,E,4MA3GbhB,MAAQ,CACNtD,KAAM,GACNuE,YAAaC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GAChE9B,WAAY2B,KAAKC,MAAMC,aAAaC,QAAQ,gBAAkB,GAC9DxB,WAAW,G,EAWbpD,cAAgB,SAACO,GACf,EAAKkD,SAAS,CACZxD,KAAMM,EAAMsE,QAAQ,MAAO,IAAIA,QAAQ,MAAO,Q,EAIlDjE,aAAe,SAACL,GACdA,EAAMuE,iBACN,EAAKrB,UAAS,SAAAsB,GAAS,MAAK,CAC1BP,YAAY,GAAD,mBAAMO,EAAUP,aAAhB,CAA6B,CACtCvE,KAAM8E,EAAU9E,KAChB2B,GAAIc,oBAENzC,KAAM,Q,EAIVgD,cAAgB,SAACrB,EAAIrB,GACnB,EAAKkD,UAAS,SAAAsB,GAAS,MAAK,CAC1BjC,WAAW,2BACNiC,EAAUjC,YADL,kBAEPlB,EAAKrB,S,EAKZiB,qBAAuB,WACrB,EAAKiC,UAAS,SAAAsB,GAAS,MAAK,CAC1BP,YAAaO,EAAUP,YACpBR,QAAO,SAAA/D,GAAI,OAAuC,KAAlC8E,EAAUjC,WAAW7C,EAAK2B,OAC7CkB,WAAY,Q,EAIhBI,gBAAkB,SAACtB,GACjB,EAAK6B,UAAS,SAAAsB,GAAS,MAAK,CAC1BP,YAAaO,EAAUP,YAAYR,QAAO,SAAA/D,GAAI,OAAIA,EAAK2B,KAAOA,gBAGzD,EAAK2B,MAAMT,WAAWlB,I,EAG/BuB,cAAgB,WACd,EAAKM,UAAS,SAAAsB,GAAS,MAAK,CAC1B3B,WAAY2B,EAAU3B,cACpB,YAC2B,IAAzB,EAAKG,MAAMH,UACb,EAAKG,MAAMiB,YAAYQ,SAAQ,SAACC,GAC9B,EAAKxB,UAAS,SAAAsB,GAAS,MAAK,CAC1BjC,WAAW,2BACNiC,EAAUjC,YADL,kBAEPmC,EAAarD,IAAK,WAKzB,EAAK6B,SAAS,CACZX,WAAY,S,mEAjEE,IAAD,EACiBY,KAAKH,MAAjCiB,EADW,EACXA,YAAa1B,EADF,EACEA,WAErB6B,aAAaO,QAAQ,cAAeT,KAAKU,UAAUX,IAEnDG,aAAaO,QAAQ,aAAcT,KAAKU,UAAUrC,M,+BAkE1C,IAAD,EAMHY,KAAKH,MAJPtD,EAFK,EAELA,KACAuE,EAHK,EAGLA,YACA1B,EAJK,EAILA,WACAM,EALK,EAKLA,UAGF,OACE,6BAASlD,UAAU,WACjB,kBAAC,EAAD,CACEF,cAAe0D,KAAK1D,cACpBC,KAAMA,EACNW,aAAc8C,KAAK9C,eAErB,kBAAC,EAAD,CACEa,YAAa+C,EACb1B,WAAYA,EACZG,cAAeS,KAAKT,cACpBG,UAAWA,EACXD,cAAeO,KAAKP,cACpBD,gBAAiBQ,KAAKR,gBACtB1B,qBAAsBkC,KAAKlC,4B,GArGnB6C,IAAMC,WCCxBc,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.27c45f90.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const HeaderInput = ({ handleAddTask, task }) => (\n  <input\n    className=\"new-todo\"\n    maxLength=\"25\"\n    placeholder=\"What needs to be done?\"\n    value={task}\n    onChange={event => handleAddTask(event.target.value)}\n    required\n  />\n);\n\nHeaderInput.propTypes = {\n  handleAddTask: PropTypes.func.isRequired,\n  task: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderInput } from './HeaderInput/HeaderInput';\n\nexport const Header = (props) => {\n  const { handleAddTask, task, handleSubmit } = props;\n\n  return (\n    <form onSubmit={handleSubmit} className=\"header\">\n      <h1>todos</h1>\n      <HeaderInput handleAddTask={handleAddTask} task={task} />\n    </form>\n  );\n};\n\nHeader.propTypes = {\n  handleAddTask: PropTypes.func.isRequired,\n  task: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport { TodoFooterShape } from '../Shapes/TodoFooterShape';\n\nexport const TodoFooter = (props) => {\n  const {\n    remainedTasks,\n    handleShowActive,\n    handleShowCompleted,\n    handleShowAll,\n    handleClearCompleted,\n    value,\n    defaultList,\n  } = props;\n  const footerDisplaying = defaultList.length\n    ? { display: 'block' } : { display: 'none' };\n\n  const buttonsList = [\n    {\n      link: '#/',\n      content: 'All',\n      onClick: handleShowAll,\n    },\n    {\n      link: '#/active',\n      content: 'Active',\n      onClick: handleShowActive,\n    },\n    {\n      link: '#/completed',\n      content: 'Completed',\n      onClick: handleShowCompleted,\n    },\n  ];\n\n  return (\n    <footer className=\"footer\" style={footerDisplaying}>\n      <span className=\"todo-count\">\n        {`${remainedTasks} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        {buttonsList.map((button, index) => (\n          <li key={uuid()}>\n            <a\n              onClick={() => button.onClick(index)}\n              href={button.link}\n              className={value === index ? 'selected' : ''}\n            >\n              {button.content}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        onClick={handleClearCompleted}\n        type=\"button\"\n        className=\"clear-completed\"\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodoFooter.propTypes = TodoFooterShape.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const TodoFooterShape = PropTypes.shape({\n  remainedTasks: PropTypes.number.isRequired,\n  handleShowActive: PropTypes.func.isRequired,\n  handleShowCompleted: PropTypes.func.isRequired,\n  handleShowAll: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n  generalList: PropTypes.arrayOf(PropTypes.shape({\n    task: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n});\n","export const addHighLight = (index, checkBoxId) => (\n  checkBoxId[index] === true ? 'completed' : ''\n);\n","import PropTypes from 'prop-types';\n\nexport const TodoListShape = PropTypes.shape({\n  generalList: PropTypes.arrayOf(PropTypes.shape({\n    task: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n  checkBoxId: PropTypes.objectOf(PropTypes.any).isRequired,\n  handleChecked: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  handleClearTask: PropTypes.func.isRequired,\n  handleMarkAll: PropTypes.func.isRequired,\n  isTouched: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport { TodoFooter } from '../TodoFooter/TodoFooter';\nimport { TodoListShape } from '../Shapes/TodoListShape';\nimport { addHighLight } from '../Helpers/addHighlight';\n\nexport class TodoList extends React.Component {\n    state = {\n      defaultList: [...this.props.generalList],\n      onToggle: 'default',\n      value: 0,\n    };\n\n    static getDerivedStateFromProps(props, state) {\n      if (props.generalList !== state.defaultList) {\n        return {\n          defaultList: props.generalList,\n        };\n      }\n\n      return null;\n    }\n\n    handleShowActive = (index) => {\n      this.setState({\n        onToggle: 'active',\n        value: index,\n      });\n    }\n\n    handleShowCompleted = (index) => {\n      this.setState({\n        onToggle: 'completed',\n        value: index,\n      });\n    }\n\n    handleShowAll = (index) => {\n      this.setState({\n        onToggle: 'default',\n        value: index,\n      });\n    }\n\n    render() {\n      const { onToggle, defaultList, value } = this.state;\n      const {\n        checkBoxId,\n        handleChecked,\n        handleClearCompleted,\n        handleClearTask,\n        handleMarkAll,\n        isTouched,\n      } = this.props;\n      const completedTasks = Array.from(Object.values(checkBoxId))\n        .filter(task => task !== false).length;\n      const remainedTasks = defaultList.length - completedTasks;\n      let updatedList = [];\n\n      switch (onToggle) {\n        case 'active':\n          updatedList = defaultList\n            .filter(task => !checkBoxId[task.id] === true);\n          break;\n        case 'completed':\n          updatedList = defaultList\n            .filter(task => checkBoxId[task.id] === true);\n          break;\n        default:\n          updatedList = defaultList;\n      }\n\n      return (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              onClick={() => handleMarkAll(isTouched)}\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n              {updatedList.map(todoItem => (\n                <li\n                  className={addHighLight(todoItem.id, checkBoxId)}\n                  key={todoItem.id}\n                >\n                  <div className=\"view\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"toggle\"\n                      id={`todo-${todoItem.id}`}\n                      checked={checkBoxId[todoItem.id] === true}\n                      onChange={(event) => {\n                        handleChecked(todoItem.id, event.target.checked);\n                      }}\n                    />\n                    <label>{todoItem.task}</label>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleClearTask(todoItem.id)}\n                      className=\"destroy\"\n                    />\n                  </div>\n                  <input type=\"text\" className=\"edit\" />\n                </li>\n              ))}\n            </ul>\n          </section>\n          <TodoFooter\n            remainedTasks={remainedTasks}\n            value={value}\n            defaultList={defaultList}\n            handleClearCompleted={handleClearCompleted}\n            handleShowActive={this.handleShowActive}\n            handleShowCompleted={this.handleShowCompleted}\n            handleShowAll={this.handleShowAll}\n          />\n        </>\n      );\n    }\n}\n\nTodoList.propTypes = TodoListShape.isRequired;\n","import React from 'react';\nimport { uuid } from 'uuidv4';\nimport { Header } from './components/Header/Header';\nimport { TodoList } from './components/TodoList/TodoList';\n\nclass App extends React.Component {\n  state = {\n    task: '',\n    dynamicList: JSON.parse(localStorage.getItem('dynamicList')) || [],\n    checkBoxId: JSON.parse(localStorage.getItem('checkBoxId')) || {},\n    isTouched: false,\n  }\n\n  componentDidUpdate() {\n    const { dynamicList, checkBoxId } = this.state;\n\n    localStorage.setItem('dynamicList', JSON.stringify(dynamicList));\n\n    localStorage.setItem('checkBoxId', JSON.stringify(checkBoxId));\n  }\n\n  handleAddTask = (event) => {\n    this.setState({\n      task: event.replace(/^\\s/, '').replace(/\\s/g, ' '),\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState(prevState => ({\n      dynamicList: [...prevState.dynamicList, {\n        task: prevState.task,\n        id: uuid(),\n      }],\n      task: '',\n    }));\n  }\n\n  handleChecked = (id, event) => {\n    this.setState(prevState => ({\n      checkBoxId: {\n        ...prevState.checkBoxId,\n        [id]: event,\n      },\n    }));\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      dynamicList: prevState.dynamicList\n        .filter(task => !prevState.checkBoxId[task.id] === true),\n      checkBoxId: {},\n    }));\n  }\n\n  handleClearTask = (id) => {\n    this.setState(prevState => ({\n      dynamicList: prevState.dynamicList.filter(task => task.id !== id),\n    }));\n\n    delete this.state.checkBoxId[id];\n  }\n\n  handleMarkAll = () => {\n    this.setState(prevState => ({\n      isTouched: !prevState.isTouched,\n    }), () => {\n      if (this.state.isTouched === true) {\n        this.state.dynamicList.forEach((currentValue) => {\n          this.setState(prevState => ({\n            checkBoxId: {\n              ...prevState.checkBoxId,\n              [currentValue.id]: true,\n            },\n          }));\n        });\n      } else {\n        this.setState({\n          checkBoxId: {},\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      task,\n      dynamicList,\n      checkBoxId,\n      isTouched,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          handleAddTask={this.handleAddTask}\n          task={task}\n          handleSubmit={this.handleSubmit}\n        />\n        <TodoList\n          generalList={dynamicList}\n          checkBoxId={checkBoxId}\n          handleChecked={this.handleChecked}\n          isTouched={isTouched}\n          handleMarkAll={this.handleMarkAll}\n          handleClearTask={this.handleClearTask}\n          handleClearCompleted={this.handleClearCompleted}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}